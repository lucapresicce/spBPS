hyperpar = list(delta = delta_seq,
phi = phi_seq),
W = Ws, R = 1)
predictions[[r]] <- result}
predictions[[r]]
tictoc::tic()
## Generate subsets of data
n <- 100
p <- 3
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n), nrow = n, ncol = 1)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
data_part <- subset_data(data = list(Y = Y, X = X, crd = crd), K = 10)
## Select competetive set of values for hyperparameters
delta_seq <- c(0.1, 0.2, 0.3)
phi_seq <- c(3, 4, 5)
## Fit local models
fit_list <- vector(length = 10, mode = "list")
for (i in 1:10) {
Yi <- data_part$Y_list[[i]]
Xi <- data_part$X_list[[i]]
crd_i <- data_part$crd_list[[i]]
p <- ncol(Xi)
bps <- spBPS::BPS_weights(data = list(Y = Yi, X = Xi),
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2), coords = crd_i,
hyperpar = list(delta = delta_seq,
phi = phi_seq),
K = 5)
w_hat <- bps$W
epd <- bps$epd
fit_list[[i]] <- list(epd, w_hat) }
## Model combination weights between partitions using Bayesian Predictive Stacking
comb_bps <- BPS_combine(fit_list = fit_list, K = 10, rp = 1)
Wbps <- comb_bps$W
W_list <- comb_bps$W_list
## Generate prediction points
m <- 100
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
## Perform posterior predictive sampling
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
predictions <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- matrix(data_part$Y_list[[ind_s]])
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_pred(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_new, crd_u = crd_new,
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2),
hyperpar = list(delta = delta_seq,
phi = phi_seq),
W = Ws, R = 1)
predictions[[r]] <- result}
tictoc::toc()
tictoc::tic()
## Generate subsets of data
n <- 100
p <- 3
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n), nrow = n, ncol = 1)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
data_part <- subset_data(data = list(Y = Y, X = X, crd = crd), K = 10)
## Select competetive set of values for hyperparameters
delta_seq <- c(0.1, 0.2, 0.3)
phi_seq <- c(3, 4, 5)
## Fit local models
fit_list <- vector(length = 10, mode = "list")
for (i in 1:10) {
Yi <- data_part$Y_list[[i]]
Xi <- data_part$X_list[[i]]
crd_i <- data_part$crd_list[[i]]
p <- ncol(Xi)
bps <- spBPS::BPS_weights(data = list(Y = Yi, X = Xi),
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2), coords = crd_i,
hyperpar = list(delta = delta_seq,
phi = phi_seq),
K = 5)
w_hat <- bps$W
epd <- bps$epd
fit_list[[i]] <- list(epd, w_hat) }
## Model combination weights between partitions using Bayesian Predictive Stacking
comb_bps <- BPS_combine(fit_list = fit_list, K = 10, rp = 1)
Wbps <- comb_bps$W
W_list <- comb_bps$W_list
## Generate prediction points
m <- 50
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
## Perform posterior predictive sampling
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
predictions <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- matrix(data_part$Y_list[[ind_s]])
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_pred(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_u, crd_u = crd_u,
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2),
hyperpar = list(delta = delta_seq,
phi = phi_seq),
W = Ws, R = 1)
predictions[[r]] <- result}
tictoc::tic()
## Generate subsets of data
n <- 100
p <- 3
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n), nrow = n, ncol = 1)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
data_part <- subset_data(data = list(Y = Y, X = X, crd = crd), K = 10)
## Select competetive set of values for hyperparameters
delta_seq <- c(0.1, 0.2, 0.3)
phi_seq <- c(3, 4, 5)
## Fit local models
fit_list <- vector(length = 10, mode = "list")
for (i in 1:10) {
Yi <- data_part$Y_list[[i]]
Xi <- data_part$X_list[[i]]
crd_i <- data_part$crd_list[[i]]
p <- ncol(Xi)
bps <- spBPS::BPS_weights(data = list(Y = Yi, X = Xi),
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2), coords = crd_i,
hyperpar = list(delta = delta_seq,
phi = phi_seq),
K = 5)
w_hat <- bps$W
epd <- bps$epd
fit_list[[i]] <- list(epd, w_hat) }
## Model combination weights between partitions using Bayesian Predictive Stacking
comb_bps <- BPS_combine(fit_list = fit_list, K = 10, rp = 1)
Wbps <- comb_bps$W
W_list <- comb_bps$W_list
## Generate prediction points
m <- 50
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
## Perform posterior predictive sampling
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
predictions <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- matrix(data_part$Y_list[[ind_s]])
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_pred(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_new, crd_u = crd_new,
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2),
hyperpar = list(delta = delta_seq,
phi = phi_seq),
W = Ws, R = 1)
predictions[[r]] <- result}
tictoc::toc()
## Generate subsets of data
n <- 100
p <- 3
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n), nrow = n, ncol = 1)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
data_part <- subset_data(data = list(Y = Y, X = X, crd = crd), K = 10)
## Select competetive set of values for hyperparameters
delta_seq <- c(0.1, 0.2, 0.3)
phi_seq <- c(3, 4, 5)
## Fit local models
fit_list <- vector(length = 10, mode = "list")
for (i in 1:10) {
Yi <- data_part$Y_list[[i]]
Xi <- data_part$X_list[[i]]
crd_i <- data_part$crd_list[[i]]
p <- ncol(Xi)
bps <- spBPS::BPS_weights(data = list(Y = Yi, X = Xi),
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2), coords = crd_i,
hyperpar = list(delta = delta_seq,
phi = phi_seq),
K = 5)
w_hat <- bps$W
epd <- bps$epd
fit_list[[i]] <- list(epd, w_hat) }
## Model combination weights between partitions using Bayesian Predictive Stacking
## Generate prediction points
m <- 100
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
postsmp_and_pred <- vector(length = R, mode = "list")
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
postsmp_and_pred <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- matrix(data_part$Y_list[[ind_s]])
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_post(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_new, crd_u = crd_new,
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2),
hyperpar = list(delta = delta_seq,
phi = phi_seq),
W = Ws, R = 1)
postsmp_and_pred[r] <- result}
tictoc::tic()
## Generate subsets of data
n <- 100
p <- 3
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n), nrow = n, ncol = 1)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
data_part <- subset_data(data = list(Y = Y, X = X, crd = crd), K = 10)
## Select competetive set of values for hyperparameters
delta_seq <- c(0.1, 0.2, 0.3)
phi_seq <- c(3, 4, 5)
## Fit local models
fit_list <- vector(length = 10, mode = "list")
for (i in 1:10) {
Yi <- data_part$Y_list[[i]]
Xi <- data_part$X_list[[i]]
crd_i <- data_part$crd_list[[i]]
p <- ncol(Xi)
bps <- spBPS::BPS_weights(data = list(Y = Yi, X = Xi),
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2), coords = crd_i,
hyperpar = list(delta = delta_seq,
phi = phi_seq),
K = 5)
w_hat <- bps$W
epd <- bps$epd
fit_list[[i]] <- list(epd, w_hat) }
## Model combination weights between partitions using Bayesian Predictive Stacking
comb_bps <- BPS_combine(fit_list = fit_list, K = 10, rp = 1)
Wbps <- comb_bps$W
W_list <- comb_bps$W_list
## Generate prediction points
m <- 100
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
## Perform posterior and posterior predictive sampling
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
postsmp_and_pred <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- matrix(data_part$Y_list[[ind_s]])
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_post(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_new, crd_u = crd_new,
priors = list(mu_b = matrix(rep(0, p)),
V_b = diag(10, p),
a = 2,
b = 2),
hyperpar = list(delta = delta_seq,
phi = phi_seq),
W = Ws, R = 1)
postsmp_and_pred[[r]] <- result}
tictoc::toc()
n <- 100
p <- 3
q <- 2
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n*q), nrow = n, ncol = q)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
alfa_seq <- c(0.7, 0.8, 0.9)
phi_seq <- c(3, 4, 5)
## Perform Bayesian Predictive Stacking within subsets
bps <- spBPS::BPS_weights_MvT(data = list(Y = Y, X = X),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3), coords = crd,
hyperpar = list(alpha = alfa_seq,
phi = phi_seq),
K = 5)
bps
## Generate subsets of data
n <- 100
p <- 3
q <- 2
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n*q), nrow = n, ncol = q)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
data_part <- subset_data(data = list(Y = Y, X = X, crd = crd), K = 10)
## Select competitive set of values for hyperparameters
alfa_seq <- c(0.7, 0.8, 0.9)
phi_seq <- c(3, 4, 5)
fit_list <- vector(length = 10, mode = "list")
for (i in 1:10) {
Yi <- data_part$Y_list[[i]]
Xi <- data_part$X_list[[i]]
crd_i <- data_part$crd_list[[i]]
bps <- spBPS::BPS_weights_MvT(data = list(Y = Yi, X = Xi),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3), coords = crd_i,
hyperpar = list(alpha = alfa_seq,
phi = phi_seq),
K = 5)
w_hat <- bps$W
epd <- bps$epd
fit_list[[i]] <- list(epd, w_hat) }
## Model combination weights between partitions using Bayesian Predictive Stacking
comb_bps <- BPS_combine(fit_list = fit_list, K = 10, rp = 1)
Wbps <- comb_bps$W
W_list <- comb_bps$W_list
m <- 100
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
predictions <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- data_part$Y_list[[ind_s]]
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_pred_MvT(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_new, crd_u = crd_new,
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
hyperpar = list(alpha = alfa_seq,
phi = phi_seq),
W = Ws, R = 1)
predictions[[r]] <- result}
predictions[[r]]
m <- 200
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
## Perform posterior predictive sampling
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
predictions <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- data_part$Y_list[[ind_s]]
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_pred_MvT(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_new, crd_u = crd_new,
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
hyperpar = list(alpha = alfa_seq,
phi = phi_seq),
W = Ws, R = 1)
predictions[[r]] <- result}
tictoc::tic()
## Generate subsets of data
n <- 100
p <- 3
q <- 2
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n*q), nrow = n, ncol = q)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
data_part <- subset_data(data = list(Y = Y, X = X, crd = crd), K = 10)
## Select competitive set of values for hyperparameters
alfa_seq <- c(0.7, 0.8, 0.9)
phi_seq <- c(3, 4, 5)
## Fit local models
fit_list <- vector(length = 10, mode = "list")
for (i in 1:10) {
Yi <- data_part$Y_list[[i]]
Xi <- data_part$X_list[[i]]
crd_i <- data_part$crd_list[[i]]
bps <- spBPS::BPS_weights_MvT(data = list(Y = Yi, X = Xi),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3), coords = crd_i,
hyperpar = list(alpha = alfa_seq,
phi = phi_seq),
K = 5)
w_hat <- bps$W
epd <- bps$epd
fit_list[[i]] <- list(epd, w_hat) }
## Model combination weights between partitions using Bayesian Predictive Stacking
comb_bps <- BPS_combine(fit_list = fit_list, K = 10, rp = 1)
Wbps <- comb_bps$W
W_list <- comb_bps$W_list
## Generate prediction points
m <- 100
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
## Perform posterior predictive sampling
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
predictions <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- data_part$Y_list[[ind_s]]
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_pred_MvT(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_new, crd_u = crd_new,
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
hyperpar = list(alpha = alfa_seq,
phi = phi_seq),
W = Ws, R = 1)
predictions[[r]] <- result}
tictoc::toc()
tictoc::tic()
## Generate subsets of data
n <- 100
p <- 3
q <- 2
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
Y <- matrix(rnorm(n*q), nrow = n, ncol = q)
crd <- matrix(runif(n*2), nrow = n, ncol = 2)
data_part <- subset_data(data = list(Y = Y, X = X, crd = crd), K = 10)
## Select competitive set of values for hyperparameters
alfa_seq <- c(0.7, 0.8, 0.9)
phi_seq <- c(3, 4, 5)
## Fit local models
fit_list <- vector(length = 10, mode = "list")
for (i in 1:10) {
Yi <- data_part$Y_list[[i]]
Xi <- data_part$X_list[[i]]
crd_i <- data_part$crd_list[[i]]
bps <- spBPS::BPS_weights_MvT(data = list(Y = Yi, X = Xi),
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3), coords = crd_i,
hyperpar = list(alpha = alfa_seq,
phi = phi_seq),
K = 5)
w_hat <- bps$W
epd <- bps$epd
fit_list[[i]] <- list(epd, w_hat) }
## Model combination weights between partitions using Bayesian Predictive Stacking
comb_bps <- BPS_combine(fit_list = fit_list, K = 10, rp = 1)
Wbps <- comb_bps$W
W_list <- comb_bps$W_list
## Generate prediction points
m <- 100
X_new <- matrix(rnorm(m*p), nrow = m, ncol = p)
crd_new <- matrix(runif(m*2), nrow = m, ncol = 2)
## Perform posterior and posterior predictive sampling
R <- 250
subset_ind <- sample(1:10, R, T, Wbps)
postsmp_and_pred <- vector(length = R, mode = "list")
for (r in 1:R) {
ind_s <- subset_ind[r]
Ys <- data_part$Y_list[[ind_s]]
Xs <- data_part$X_list[[ind_s]]
crds <- data_part$crd_list[[ind_s]]
Ws <- W_list[[ind_s]]
result <- spBPS::BPS_post_MvT(data = list(Y = Ys, X = Xs), coords = crds,
X_u = X_new, crd_u = crd_new,
priors = list(mu_B = matrix(0, nrow = p, ncol = q),
V_r = diag(10, p),
Psi = diag(1, q),
nu = 3),
hyperpar = list(alpha = alfa_seq,
phi = phi_seq),
W = Ws, R = 1)
postsmp_and_pred[[r]] <- result}
tictoc::toc()
par()
rhub::rhub_setup()
rhub::rhub_doctor()
rhub::rhub_doctor()
rhub::rhub_doctor()
rhub::rhub_platforms()
rhub::rhub_check(platforms = c("ubuntu-release", "ubuntu-gcc12"))
rhub::rhub_setup()
rhub::rhub_doctor()
rhub::rhub_check(platforms = c("ubuntu-release", "ubuntu-gcc12"))
